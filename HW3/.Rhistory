knitr::opts_chunk$set(echo = TRUE)
prostate <- read.csv("prostate.csv")
prostate
mean(prostate$age) + c(-1,1) * qnorm(0.975) * (sd(prostate$age)/sqrt(length(prostate$age)))
x_bar <- mean(prostate$age)
s_hat <- sd(prostate$age)
n <- length(prostate$age)
x_bar + c(-1,1) * qnorm(0.975) * (s_hat/sqrt(n))
x_bar + c(-1,1) * qnorm(0.95) * (s_hat/sqrt(n))
summary(prostate)
cheddar <- read.csv('cheddar.csv')
cheddar
fit <- lm(taste ~ Acetic + H2S + Lactic, data = cheddar)
summary(fit)
fit1 <- lm(taste ~ Acetic + exp(H2S) + exp(Lactic), data = cheddar)
summary(fit1)
fit1 <- lm(taste ~ exp(Acetic) + exp(H2S) + Lactic, data = cheddar)
summary(fit1)
0.00425*0.01
teengamb <- read.csv("teengamb.csv")
fit2 <- lm(gamb ~ ., data = teengamb)
fit2 <- lm(gamble ~ ., data = teengamb)
summary(fit2)
3.9118*0.01
fit3 <- lm(gamble ~ income, data = teengamb)
sat <- read.csv("sat.csv")
fit4 <- lm(total ~ expend + salary + ratio + takers, data = sat)
plot(fit4$residuals, fit4$fitted.values)
plot(fit4$fitted.values, fit4$residuals)
qq(fit4$residuals)
qqplot(fit4$residuals)
qnorm(fit4$residuals)
knitr::opts_chunk$set(echo = TRUE)
library(mosaicData)
install.packages("mosaicData")
library(mosaicData)
head(HELPrct[,1:6])
library(Lahman)
bk_teams <- c("BR1", "BR2", "BR3", "BR4", "BRO", "BRP", "BRF")
library(Lahman)
bk_teams <- c("BR1", "BR2", "BR3", "BR4", "BRO", "BRP", "BRF")
library(mosaicData)
write.csv(HELPrct, "HELPrct.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(prostate)
fit5 <- lm(lpsa ~ age, data = prostate)
summary(fit5)
fit5 <- lm(lpsa ~ age, data = prostate)
summary(fit5)$coef
fit5 <- lm(lpsa ~ age, data = prostate)
summary(fit5)$coef[2,1]
fit5 <- lm(lpsa ~ age, data = prostate)
summary(fit5)
summary(fit5)$coef[2,1] + c(-1,1) * qnorm(0.975) * (s_hat/sqrt(n))
fit5 <- lm(lpsa ~ age, data = prostate)
summary(fit5)
summary(fit5)$coef[2,2]
summary(fit5)$coef[2,1] + c(-1,1) * qnorm(0.975) * (s_hat/sqrt(n))
fit5 <- lm(lpsa ~ age, data = prostate)
summary(fit5)$coef[2,1] + c(-1,1) * qnorm(0.975) * summary(fit5)$coef[2,1]
summary(fit5)$coef[2,1] + c(-1,1) * qnorm(0.95) * summary(fit5)$coef[2,1]
summary(fit5)$coef[2,1]
summary(fit5)$coef[2,1]
summary(fit5)
fit5 <- lm(lpsa ~ ., data = prostate)
summary(fit5)
summary(fit5)$coef[2,1] + c(-1,1) * qnorm(0.975) * summary(fit5)$coef[2,1]
fit5 <- lm(lpsa ~ ., data = prostate)
summary(fit5)$coef[4,1] + c(-1,1) * qnorm(0.975) * summary(fit5)$coef[4,1]
summary(fit5)$coef[2,1] + c(-1,1) * qnorm(0.95) * summary(fit5)$coef[2,1]
summary(fit5)$coef[4,1] + c(-1,1) * qnorm(0.95) * summary(fit5)$coef[4,1]
fit5 <- lm(lpsa ~ ., data = prostate)
summary(fit5)$coef[4,1] + c(-1,1) * qnorm(0.975) * summary(fit5)$coef[4,2]
summary(fit5)$coef[4,1] + c(-1,1) * qnorm(0.95) * summary(fit5)$coef[4,2]
summary(fit5)
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~., data = prostate)
# save permutation T statistic
summary(lm.model)$coef
# set random seed to keep result same
set.seed(123)
# empty vector to save each permutation T statistic
Ts <- c()
for(i in 1:1000){
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~., data = prostate)
# save permutation T statistic
Ts[i] <-  summary(lm.model)$coef[4,3]
}
# Calculate the proportion of less than the original F statistics
mean(abs(Ts) > abs(T.original))
# orginal t test for tricepts
lm.model <- lm(lpsa~., data = prostate)
summary(lm.model)
summary(lm.model)$coef[4,]
T.original <- summary(lm.model)$coef[4,3]
# set random seed to keep result same
set.seed(123)
# empty vector to save each permutation T statistic
Ts <- c()
for(i in 1:1000){
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~., data = prostate)
# save permutation T statistic
Ts[i] <-  summary(lm.model)$coef[4,3]
}
# Calculate the proportion of less than the original F statistics
mean(abs(Ts) > abs(T.original))
hist(Ts, breaks = 100)
# orginal t test
lm.model <- lm(lpsa~., data = prostate)
summary(lm.model)
summary(lm.model)$coef[4,]
T.original <- summary(lm.model)$coef[4,3]
# set random seed to keep result same
set.seed(123)
# empty vector to save each permutation T statistic
Ts <- c()
for(i in 1:1000){
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~., data = prostate)
# save permutation T statistic
Ts[i] <-  summary(lm.model)$coef[4,3]
}
# Calculate the proportion of less than the original T statistics
mean(abs(Ts) > abs(T.original))
hist(Ts, breaks = 100)
# orginal t test
lm.model <- lm(lpsa~., data = prostate)
summary(lm.model)$coef[4,]
T.original <- summary(lm.model)$coef[4,3]
# set random seed to keep result same
set.seed(123)
# empty vector to save each permutation T statistic
Ts <- c()
for(i in 1:1000){
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~., data = prostate)
# save permutation T statistic
Ts[i] <-  summary(lm.model)$coef[4,3]
}
# Calculate the proportion of less than the original T statistics
mean(abs(Ts) > abs(T.original))
hist(Ts, breaks = 100)
# orginal t test
lm.model <- lm(lpsa~., data = prostate)
summary(lm.model)
summary(lm.model)$coef[4,]
T.original <- summary(lm.model)$coef[4,3]
# set random seed to keep result same
set.seed(123)
# empty vector to save each permutation T statistic
Ts <- c()
for(i in 1:1000){
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~., data = prostate)
# save permutation T statistic
Ts[i] <-  summary(lm.model)$coef[4,3]
}
# Calculate the proportion of less than the original T statistics
mean(abs(Ts) > abs(T.original))
hist(Ts, breaks = 100)
# orginal t test
lm.model <- lm(lpsa~., data = prostate)
summary(lm.model)
summary(lm.model)$coef[4,]
T.original <- summary(lm.model)$coef[4,3]
# set random seed to keep result same
set.seed(123)
# empty vector to save each permutation T statistic
Ts <- c()
for(i in 1:1000){
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~., data = prostate)
# save permutation T statistic
Ts[i] <-  summary(lm.model)$coef[4,3]
}
# Calculate the proportion of less than the original T statistics
mean(abs(Ts) > abs(T.original))
hist(Ts, breaks = 100)
# orginal t test
lm.model <- lm(lpsa~., data = prostate)
summary(lm.model)
summary(lm.model)$coef[4,]
T.original <- summary(lm.model)$coef[4,3]
# set random seed to keep result same
set.seed(123)
# empty vector to save each permutation T statistic
Ts <- c()
for(i in 1:1000){
# linear regression on shuffled pregnant
lm.model <- lm(lpsa~lcavol+lweight+sample(age)+lbph+svi+lcp+gleason+pgg45, data = prostate)
# save permutation T statistic
Ts[i] <-  summary(lm.model)$coef[4,3]
}
# Calculate the proportion of less than the original T statistics
mean(abs(Ts) > abs(T.original))
hist(Ts, breaks = 100)
fit6 <- lm(lpsa ~ lcavol + lweight + svi, data = prostate)
fit6 <- lm(lpsa ~ lcavol + lweight + svi, data = prostate)
anova(fit5, fit6)
fit6 <- lm(lpsa ~ lcavol + lweight + svi, data = prostate)
anova(fit6, fit5)
cheddar <- read.csv('cheddar.csv')
cheddar
fit <- lm(taste ~ Acetic + H2S + Lactic, data = cheddar)
summary(fit)
fit1 <- lm(taste ~ exp(Acetic) + exp(H2S) + Lactic, data = cheddar)
summary(fit1)
fit3 <- lm(gamble ~ income, data = teengamb)
anova(fit3, fit2)
divusa <- read.csv("divusa.csv")
divusa
divusa <- read.csv("divusa.csv")
fit7 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
qqnorm(fit4$residuals)
qqline(fit4$residuals)
# studentized residues
sr <- rstudent(fit4)
df <- n - 9 - 1
# use 5% critical value as cutoff
which(abs(sr) > qt(0.975, df))
sum(abs(sr) > qt(0.975, df))
?qt
# studentized residues
sr <- rstudent(fit4)
df <- n - 4 - 1
# use 5% critical value as cutoff
which(abs(sr) > qt(0.975, df))
sum(abs(sr) > qt(0.975, df))
# studentized residues
sr <- rstudent(fit4)
df <- n - 4 - 1
# use 5% critical value as cutoff
which(abs(sr) > qt(0.975, df))
sum(abs(sr) > qt(0.975, df))
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,3])
# influential observation
beta.change <- dfbeta(fit4)
beta.change
# plot the change of glucose parameter after removing each data point
plot(beta.change[,3])
?dfbeta
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,3])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change)
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.cahnge[,3])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,3])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,1])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,2])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,3])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,4])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,5])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of glucose parameter after removing each data point
plot(beta.change[,6])
# influential observation
beta.change <- dfbeta(fit4)
# plot the change of expend parameter after removing each data point
plot(beta.change[,2])
# plot the change of salary parameter after removing each data point
plot(beta.change[,3])
# plot the change of ratio parameter after removing each data point
plot(beta.change[,4])
# plot the change of takers parameter after removing each data point
plot(beta.change[,5])
divusa <- read.csv("divusa.csv")
fit7 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
plot(fit7$residuals, divusa$year)
divusa <- read.csv("divusa.csv")
fit7 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
plot(divusa$year, fit7$residuals)
divusa <- read.csv("divusa.csv")
fit7 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
# plot residuals vs years
plot(divusa$year, fit7$residuals)
# plot residual (t+1) vs. residual (t)
n <- dim(divusa)[1]
cor(tail(fit4$residuals, n-1), head(fit4$residuals, n-1))
plot(tail(fit4$residuals, n-1)~head(fit4$residuals, n-1))
# fit a linear model of residual (t+1) ~ residual (t)
divusa <- read.csv("divusa.csv")
fit7 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
# plot residuals vs years
plot(divusa$year, fit7$residuals)
# plot residual (t+1) vs. residual (t)
n <- dim(divusa)[1]
cor(tail(fit4$residuals, n-1), head(fit4$residuals, n-1))
plot(tail(fit4$residuals, n-1)~head(fit4$residuals, n-1))
# fit a linear model of residual (t+1) ~ residual (t)
fit8 <- lm(tail(fit4$residuals, n-1)~head(fit4$residuals, n-1))
divusa <- read.csv("divusa.csv")
fit7 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
# plot residuals vs years
plot(divusa$year, fit7$residuals)
# plot residual (t+1) vs. residual (t)
n <- dim(divusa)[1]
cor(tail(fit4$residuals, n-1), head(fit4$residuals, n-1))
plot(tail(fit4$residuals, n-1)~head(fit4$residuals, n-1))
# fit a linear model of residual (t+1) ~ residual (t)
fit8 <- lm(tail(fit4$residuals, n-1)~head(fit4$residuals, n-1))
summary(fit8)
divusa <- read.csv("divusa.csv")
fit7 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data = divusa)
# plot residuals vs years
plot(divusa$year, fit7$residuals)
# plot residual (t+1) vs. residual (t)
n <- dim(divusa)[1]
cor(tail(fit7$residuals, n-1), head(fit7$residuals, n-1))
plot(tail(fit7$residuals, n-1)~head(fit7$residuals, n-1))
# fit a linear model of residual (t+1) ~ residual (t)
fit8 <- lm(tail(fit7$residuals, n-1)~head(fit7$residuals, n-1))
summary(fit8)
# studentized residues
sr <- rstudent(fit4)
n <- dim(sat)[1]
df <- n - 4 - 1
# use 5% critical value as cutoff
which(abs(sr) > qt(0.975, df))
sum(abs(sr) > qt(0.975, df))
knitr::opts_chunk$set(echo = TRUE)
prostate <- read.csv("prostate.csv")
fit_test <- lm(lpsa ~ I(lcavol + lweight), data = prostate)
summary(fit_test)
